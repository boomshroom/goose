package vbe

import (
	"video"
	"color"
)

var bitmap = [...]uint8{
	0x0: 0x00, // 00000000
	0x1: 0x03, // 00000011
	0x2: 0x0C, // 00001100
	0x3: 0x0F, // 00001111
	0x4: 0x30, // 00110000
	0x5: 0x33, // 00110011
	0x6: 0x3C, // 00111100
	0x7: 0x3F, // 00111111
	0x8: 0xC0, // 11000000
	0x9: 0xC3, // 11000011
	0xA: 0xCC, // 11001100
	0xB: 0xCF, // 11001111
	0xC: 0xF0, // 11110000
	0xD: 0xF3, // 11110011
	0xE: 0xFC, // 11111100
	0xF: 0xFF, // 11111111
}

/*
  ####    ######
##    ##  ##    ##
##    ##  ######
########  ##    ##
##    ##  ##    ##
##    ##  ######
*/

var chars = [128][3]uint8{ // 6 nibbles per character
	'A': {0x69, 0x9F, 0x99},
	'B': {0xE9, 0xE9, 0x9E},
	'C': {0x69, 0x88, 0x96},
	'D': {0xE9, 0x99, 0x9E},
	'E': {0xF8, 0xE8, 0x8F},
	'F': {0xF8, 0xE8, 0x88},
	'G': {0x69, 0x8B, 0x96},
	'H': {0x99, 0xF9, 0x99},
	'I': {0xF6, 0x66, 0x6F},
	'J': {0xF2, 0x22, 0xA4},
	'K': {0x9A, 0xCA, 0x99},
	'L': {0x88, 0x88, 0x8F},
	'M': {0x9F, 0x99, 0x99},
	'N': {0x9D, 0xB9, 0x99},
	'O': {0x69, 0x99, 0x96},
	'P': {0xE9, 0xE8, 0x88},
	'Q': {0x69, 0x99, 0xB7},
	'R': {0xE9, 0xE9, 0x99},
	'S': {0x78, 0x61, 0x96},
	'T': {0xF6, 0x66, 0x66},
	'U': {0x99, 0x99, 0x96},
	'V': {0x99, 0x99, 0x66},
	'W': {0x99, 0x99, 0xF9},
	'X': {0x99, 0x69, 0x99},
	'Y': {0x99, 0x96, 0x66},
	'Z': {0xF1, 0x24, 0x8F},

	'a': {0x00, 0x69, 0x97},
	'b': {0x88, 0xE9, 0x9E},
	'c': {0x06, 0x98, 0x96},
	'd': {0x11, 0x79, 0x97},
	'e': {0x06, 0x9F, 0x86},
	'f': {0x25, 0x4E, 0x44},
	'g': {0x06, 0x97, 0x16},
	'h': {0x88, 0x8E, 0x99},
	'i': {0x02, 0x02, 0x22},
	'j': {0x20, 0x22, 0xA4},
	'k': {0x88, 0x9E, 0xA9},
	'l': {0x42, 0x22, 0x22},
	'm': {0x00, 0x6F, 0x99},
	'n': {0x00, 0xE9, 0x99},
	'o': {0x00, 0x69, 0x96},
	'p': {0x06, 0x9E, 0x88},
	'q': {0x06, 0x97, 0x11},
	'r': {0x00, 0xE8, 0x88},
	's': {0x06, 0x86, 0x16},
	't': {0x22, 0x72, 0x22},
	'u': {0x00, 0x99, 0x96},
	'v': {0x00, 0x99, 0x66},
	'w': {0x00, 0x99, 0xF9},
	'x': {0x00, 0x96, 0x99},
	'y': {0x09, 0x52, 0x48},
	'z': {0x00, 0xF2, 0x4F},

	'0': {0x69, 0xBD, 0x96},
	'1': {0x26, 0x22, 0x27},
	'2': {0x69, 0x24, 0x8F},
	'3': {0x69, 0x21, 0x96},
	'4': {0x99, 0xF1, 0x11},
	'5': {0xF8, 0xE1, 0x96},
	'6': {0x68, 0xE9, 0x96},
	'7': {0xF1, 0x24, 0x44},
	'8': {0x69, 0x69, 0x96},
	'9': {0x69, 0x71, 0x96},

	'.': {0x00, 0x00, 0x02},
	',': {0x00, 0x00, 0x22},
	'\'': {0x22, 0x00, 0x00},
	'"': {0x55, 0x00, 0x00},
	'_': {0x00, 0x00, 0x0F},
	'|': {0x22, 0x22, 0x22},
	'!': {0x22, 0x22, 0x02},
	'?': {0x69, 0x22, 0x02},
	'(': {0x48, 0x88, 0x84},
	')': {0x21, 0x11, 0x12},
	'[': {0xC8, 0x88, 0x8C},
	']': {0x31, 0x11, 0x13},
	'/': {0x11, 0x24, 0x88},
	'\\': {0x88, 0x42, 0x11},
}

type FrameBuffer struct{
	Buf []color.BGRA32
	Pitch uint
}

type Printer struct{
	FrameBuffer
	x,y uint
	width, height uint
	color color.BGRA32
}

var printer Printer

func SetFrameBuffer(fb FrameBuffer, width, height uint){
	printer = Printer{FrameBuffer: fb, x: 2, y: 2, width: width, height: height, color: color.BGRA32{R: 0xff, G: 0xff, B: 0xff}}
	video.SetPrinter(&printer)
}

func (f *FrameBuffer)SetPixel(x, y uint, c color.BGRA32){
	f.Buf[x+y*f.Pitch] = c
}

func (f *Printer) SetColor(c color.RGBA32) {
	f.color = color.BGRA32{R: c.R, B: c.B, G: c.G, A: c.A}
}

func (f *Printer) Scroll(numPixels uint){
	for y:=uint(0); y < f.height-1; y++{
		copy(f.Buf[y*f.Pitch:y*f.Pitch + f.width], f.Buf[(y+numPixels)*f.Pitch:(y+numPixels)*f.Pitch + f.width])
	}
}

func (f *Printer)PutChar(ch rune){
	if f.y > f.height - 16 {
		f.Scroll(8)
	}
	if ch == '\n' {
		f.x = 2
		f.y += 8
	}else if ch == '\t'{
		f.x += 42 - (f.x % 40)
	}else {
		f.FrameBuffer.PutChar(ch, f.x, f.y, f.color)
		f.x += 5
		if f.x > f.width - 8 {
			f.x = 2
			f.y += 8
		}
	}
}

func (f *FrameBuffer)PutChar(ch rune, x, y uint, c color.BGRA32){
	charBitMap := chars[ch]
	index := charBitMap[0]>>4
	var i uint
	for i =0; i<4; i++ {
		if index & (8>>i) != 0 {
			f.Buf[x+i + f.Pitch*y] = c
		}
	}
	y++
	index = charBitMap[0]&0xF
	for i=0; i<4; i++ {
		if index & (8>>i) != 0 {
			f.Buf[x+i + f.Pitch*y] = c
		}
	}
	y++
	index = charBitMap[1]>>4
	for i=0; i<4; i++ {
		if index & (8>>i) != 0 {
			f.Buf[x+i + f.Pitch*y] = c
		}
	}
	y++
	index = charBitMap[1]&0xF
	for i=0; i<4; i++ {
		if index & (8>>i) != 0 {
			f.Buf[x+i + f.Pitch*y] = c
		}
	}
	y++
	index = charBitMap[2]>>4
	for i=0; i<4; i++ {
		if index & (8>>i) != 0 {
			f.Buf[x+i + f.Pitch*y] = c
		}
	}
	y++
	index = charBitMap[2]&0xF
	for i=0; i<4; i++ {
		if index & (8>>i) != 0 {
			f.Buf[x+i + f.Pitch*y] = c
		}
	}
}